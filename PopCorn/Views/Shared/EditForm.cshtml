@using PopCorn.DataLayer.Enums
@using PopCorn.DataLayer.Models.DTO
@using PopCorn.DataLayer.Models.Interfaces
@model IEntity
@{
    var typeStructure = (List<ExtendedPropertyInfo>)ViewBag.FormTypeStructure;
    var formLink = (string)ViewBag.FormLink;
    var fromProject = (bool?)ViewContext.ViewBag.FromProject;
}

<form id="data-form" method="post" action="@formLink">
    @Html.HiddenFor(m => m.Id)
    <input type="hidden" name="fromProject" value="@(fromProject.HasValue && fromProject.Value ? "true" : "false")"/>
    @foreach (var data in typeStructure)
    {
        <div class="data-field">
            <label for="@data.Property.Name" class="data-label">@(data.InputViewAttribute.Name)</label>
            @{
                var isMultiSelect = data.InputViewAttribute.Type == InputFieldType.MultiSelect;
                if (data.InputViewAttribute.Type == InputFieldType.Text)
                {
                    <input name="@data.Property.Name" value="@data.Property.GetValue(Model, null)" type="text" class="data-input"/>
                }
                else if (data.InputViewAttribute.Type == InputFieldType.TextArea)
                {
                    <textarea name="@data.Property.Name" class="data-input">@data.Property.GetValue(Model, null)</textarea>
                }
                else if (data.InputViewAttribute.Type == InputFieldType.Numeric)
                {
                    <input name="@data.Property.Name" value="@data.Property.GetValue(Model, null)" type="number" step="0.1" class="data-input"/>
                }
                else if (data.InputViewAttribute.Type == InputFieldType.Calendar)
                {
                    <input name="@data.Property.Name" value="@(((DateTime?)data.Property.GetValue(Model, null))?.ToString("yyyy-MM-dd"))" type="date" class="data-input"/>
                }
                else if (data.InputViewAttribute.Type == InputFieldType.Select || isMultiSelect)
                {
                    var idProperytyName = $"{data.Property.Name}{(isMultiSelect ? "Ids" : "Id")}";
                    var selectedValues = isMultiSelect ? ((int[])Model.GetType().GetProperty(idProperytyName).GetValue(Model, null))?.Cast<int?>().ToArray()
                        : new[] {(int?)Model.GetType().GetProperty(idProperytyName).GetValue(Model, null) ?? (int?)-1};
                    <select name="@(isMultiSelect ? idProperytyName + "[]" : idProperytyName)" class="data-input select @(isMultiSelect ? "multiselect" : "")" @(isMultiSelect ? "multiple=\"\"" : "")>
                        @if (data.SelectValues.Any(v => !string.IsNullOrEmpty(v.GroupName)))
                        {
                            foreach (var valueGroup in data.SelectValues.GroupBy(v => v.GroupName))
                            {
                                <optgroup label=@valueGroup.Key>
                                    @foreach (var value in valueGroup)
                                    {
                                        <option value="@(value.Key == -1 ? (int?)null : value.Key)" selected="@(selectedValues?.Contains(value.Key))">@value.Value</option>
                                    }
                                </optgroup>
                            }
                        }
                        else
                        {
                            foreach (var value in data.SelectValues)
                            {
                                <option value="@(value.Key == -1 ? (int?)null : value.Key)" selected="@(selectedValues?.Contains(value.Key))">@value.Value</option>
                            }
                        }
                    </select>
                }
                else if (data.InputViewAttribute.Type == InputFieldType.CheckBox)
                {
                    <input name="@data.Property.Name" value="@((bool)data.Property.GetValue(Model, null) ? "true" : "false")" type="checkbox" class="data-checkbox"/>
                }
            }
        </div>
        <div class="clear"></div>
    }
    <input type="submit" class="save-data" value="Сохранить" />
</form>